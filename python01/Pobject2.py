# python不提供属性的访问控制，如public protected private
# 所有类都继承自object，这里object可以写也可以不写，同java
class Pobject2(object):
    # 定义属性
    tname = '张三'

    def __init__(self):
        pass

    # 在构造函数中定义属性
    # password前面添加一个下滑线表示是变成规范中的私有属性，但是仍然可以访问，只是一种约束
    # weight前面添加两个下滑线表示是私有的，只有本类可以访问的到，但也不是绝对的
    def __init__(self,name,password,weight):
        self.name=name
        self._password=password
        self.__weight=weight

    def get_weight(self):
        return self.__weight

if __name__ == '__main__':
    p = Pobject2('李四','123456',80)

    # dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。
    # 如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。
    # dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；
    print(dir())
    print("==========================================================================1")
    print(dir(p))
    print("==========================================================================2")
    # __dict__是一个字典，键为属性名，值为属性值；
    print(p.__dict__)
    print(object.__dict__)
    print("==========================================================================3")
    print(p.get_weight())
    print("==========================================================================4")
    # 这个属性仍然能够访问，在运行结果中可以看到，在属性的前面添加两个下划线，后来获取到的结果是被自动的改变了
    # 所以在调用的时候，先使用dir看一看属性，然后再调用
    print(p._Pobject2__weight)

    # 有关python安全的问题，可以不考虑
    # 部署在内网是安全的。如果要发布，那就是发布源码了。